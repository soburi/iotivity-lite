#include "structs.h"
#include "functions.h"
#include "iotivity_lite.h"
using namespace std;
using namespace Napi;
Napi::Object module_init(Napi::Env env, Napi::Object exports) {
    exports.Set("add_collection", Napi::Function::New(env, OCMain::add_collection));
    exports.Set("add_device", Napi::Function::New(env, OCMain::add_device));
#if defined(OC_SECURITY)
    exports.Set("add_ownership_status_cb", Napi::Function::New(env, OCMain::add_ownership_status_cb));
#endif
    exports.Set("add_resource", Napi::Function::New(env, OCMain::add_resource));
#if defined(OC_SECURITY) && defined(OC_PKI)
    exports.Set("assert_all_roles", Napi::Function::New(env, OCMain::assert_all_roles));
#endif
#if defined(OC_SECURITY) && defined(OC_PKI)
    exports.Set("assert_role", Napi::Function::New(env, OCMain::assert_role));
#endif
#if defined(OC_SECURITY) && defined(OC_PKI)
    exports.Set("auto_assert_roles", Napi::Function::New(env, OCMain::auto_assert_roles));
#endif
    exports.Set("close_session", Napi::Function::New(env, OCMain::close_session));
    exports.Set("delete_link", Napi::Function::New(env, OCMain::delete_link));
    exports.Set("delete_resource", Napi::Function::New(env, OCMain::delete_resource));
    exports.Set("device_bind_resource_type", Napi::Function::New(env, OCMain::device_bind_resource_type));
    exports.Set("do_delete", Napi::Function::New(env, OCMain::do_delete));
    exports.Set("do_get", Napi::Function::New(env, OCMain::do_get));
    exports.Set("do_ip_discovery", Napi::Function::New(env, OCMain::do_ip_discovery));
    exports.Set("do_ip_discovery_all", Napi::Function::New(env, OCMain::do_ip_discovery_all));
    exports.Set("do_ip_discovery_all_at_endpoint", Napi::Function::New(env, OCMain::do_ip_discovery_all_at_endpoint));
    exports.Set("do_ip_discovery_at_endpoint", Napi::Function::New(env, OCMain::do_ip_discovery_at_endpoint));
    exports.Set("do_ip_multicast", Napi::Function::New(env, OCMain::do_ip_multicast));
    exports.Set("do_observe", Napi::Function::New(env, OCMain::do_observe));
    exports.Set("do_post", Napi::Function::New(env, OCMain::do_post));
    exports.Set("do_put", Napi::Function::New(env, OCMain::do_put));
    exports.Set("do_realm_local_ipv6_discovery", Napi::Function::New(env, OCMain::do_realm_local_ipv6_discovery));
    exports.Set("do_realm_local_ipv6_discovery_all", Napi::Function::New(env, OCMain::do_realm_local_ipv6_discovery_all));
    exports.Set("do_realm_local_ipv6_multicast", Napi::Function::New(env, OCMain::do_realm_local_ipv6_multicast));
    exports.Set("do_site_local_ipv6_discovery", Napi::Function::New(env, OCMain::do_site_local_ipv6_discovery));
    exports.Set("do_site_local_ipv6_discovery_all", Napi::Function::New(env, OCMain::do_site_local_ipv6_discovery_all));
    exports.Set("do_site_local_ipv6_multicast", Napi::Function::New(env, OCMain::do_site_local_ipv6_multicast));
    exports.Set("free_server_endpoints", Napi::Function::New(env, OCMain::free_server_endpoints));
#if defined(OC_SECURITY) && defined(OC_PKI)
    exports.Set("get_all_roles", Napi::Function::New(env, OCMain::get_all_roles));
#endif
    exports.Set("get_con_res_announced", Napi::Function::New(env, OCMain::get_con_res_announced));
    exports.Set("ignore_request", Napi::Function::New(env, OCMain::ignore_request));
    exports.Set("indicate_separate_response", Napi::Function::New(env, OCMain::indicate_separate_response));
    exports.Set("init_platform", Napi::Function::New(env, OCMain::init_platform));
    exports.Set("init_post", Napi::Function::New(env, OCMain::init_post));
    exports.Set("init_put", Napi::Function::New(env, OCMain::init_put));
#if defined(OC_SECURITY)
    exports.Set("is_owned_device", Napi::Function::New(env, OCMain::is_owned_device));
#endif
    exports.Set("link_add_link_param", Napi::Function::New(env, OCMain::link_add_link_param));
    exports.Set("link_add_rel", Napi::Function::New(env, OCMain::link_add_rel));
    exports.Set("main_init", Napi::Function::New(env, OCMain::main_init));
    exports.Set("main_loop", Napi::Function::New(env, OCMain::main_loop));
    exports.Set("main_shutdown", Napi::Function::New(env, OCMain::main_shutdown));
    exports.Set("new_link", Napi::Function::New(env, OCMain::new_link));
    exports.Set("remove_delayed_callback", Napi::Function::New(env, OCMain::remove_delayed_callback));
#if defined(OC_SECURITY)
    exports.Set("remove_ownership_status_cb", Napi::Function::New(env, OCMain::remove_ownership_status_cb));
#endif
#if defined(OC_SECURITY)
    exports.Set("reset", Napi::Function::New(env, OCMain::reset));
#endif
#if defined(OC_SECURITY)
    exports.Set("reset_device", Napi::Function::New(env, OCMain::reset_device));
#endif
    exports.Set("ri_is_app_resource_valid", Napi::Function::New(env, OCMain::ri_is_app_resource_valid));
    exports.Set("send_diagnostic_message", Napi::Function::New(env, OCMain::send_diagnostic_message));
#if defined(OC_TCP)
    exports.Set("send_ping", Napi::Function::New(env, OCMain::send_ping));
#endif
    exports.Set("send_response", Napi::Function::New(env, OCMain::send_response));
    exports.Set("send_response_raw", Napi::Function::New(env, OCMain::send_response_raw));
    exports.Set("send_separate_response", Napi::Function::New(env, OCMain::send_separate_response));
    exports.Set("set_con_res_announced", Napi::Function::New(env, OCMain::set_con_res_announced));
    exports.Set("set_con_write_cb", Napi::Function::New(env, OCMain::set_con_write_cb));
    exports.Set("set_delayed_callback", Napi::Function::New(env, OCMain::set_delayed_callback));
    exports.Set("set_factory_presets_cb", Napi::Function::New(env, OCMain::set_factory_presets_cb));
#if defined(OC_SECURITY)
    exports.Set("set_random_pin_callback", Napi::Function::New(env, OCMain::set_random_pin_callback));
#endif
    exports.Set("set_separate_response_buffer", Napi::Function::New(env, OCMain::set_separate_response_buffer));
    exports.Set("stop_multicast", Napi::Function::New(env, OCMain::stop_multicast));
    exports.Set("stop_observe", Napi::Function::New(env, OCMain::stop_observe));
    exports.Set("set_mtu_size", Napi::Function::New(env, OCMain::set_mtu_size));
    exports.Set("get_mtu_size", Napi::Function::New(env, OCMain::get_mtu_size));
    exports.Set("set_max_app_data_size", Napi::Function::New(env, OCMain::set_max_app_data_size));
    exports.Set("get_max_app_data_size", Napi::Function::New(env, OCMain::get_max_app_data_size));
    exports.Set("get_block_size", Napi::Function::New(env, OCMain::get_block_size));
    exports.Set("add_network_interface_event_callback", Napi::Function::New(env, OCMain::add_network_interface_event_callback));
    exports.Set("remove_network_interface_event_callback", Napi::Function::New(env, OCMain::remove_network_interface_event_callback));
    exports.Set("add_session_event_callback", Napi::Function::New(env, OCMain::add_session_event_callback));
    exports.Set("remove_session_event_callback", Napi::Function::New(env, OCMain::remove_session_event_callback));
    exports.Set("CborEncoder", OCCborEncoder::GetClass(env));
    exports.Set("AceResourceIterator", OCAceResourceIterator::GetClass(env));
    exports.Set("AceResource", OCAceResource::GetClass(env));
    exports.Set("AceSubject", OCAceSubject::GetClass(env));
    exports.Set("Array", OCArray::GetClass(env));
    exports.Set("BlockwiseRequestState", OCBlockwiseRequestState::GetClass(env));
    exports.Set("BlockwiseResponseState", OCBlockwiseResponseState::GetClass(env));
    exports.Set("BlockwiseStateIterator", OCBlockwiseStateIterator::GetClass(env));
    exports.Set("BlockwiseState", OCBlockwiseState::GetClass(env));
    exports.Set("ClientCallback", OCClientCallback::GetClass(env));
    exports.Set("ClientHandler", OCClientHandler::GetClass(env));
    exports.Set("ClientResponse", OCClientResponse::GetClass(env));
    exports.Set("CloudContextIterator", OCCloudContextIterator::GetClass(env));
    exports.Set("CloudContext", OCCloudContext::GetClass(env));
    exports.Set("CloudStore", OCCloudStore::GetClass(env));
    exports.Set("CollectionIterator", OCCollectionIterator::GetClass(env));
    exports.Set("Collection", OCCollection::GetClass(env));
    exports.Set("CredData", OCCredData::GetClass(env));
    exports.Set("DeviceInfo", OCDeviceInfo::GetClass(env));
    exports.Set("EndpointIterator", OCEndpointIterator::GetClass(env));
    exports.Set("Endpoint", OCEndpoint::GetClass(env));
    exports.Set("DevAddr", DevAddr::GetClass(env));
    exports.Set("Etimer", OCEtimer::GetClass(env));
    exports.Set("EtimerIterator", OCEtimerIterator::GetClass(env));
    exports.Set("EventCallbackIterator", OCEventCallbackIterator::GetClass(env));
    exports.Set("EventCallback", OCEventCallback::GetClass(env));
    exports.Set("Handler", OCHandler::GetClass(env));
    exports.Set("IPv4Addr", OCIPv4Addr::GetClass(env));
    exports.Set("IPv6Addr", OCIPv6Addr::GetClass(env));
    exports.Set("LEAddr", OCLEAddr::GetClass(env));
    exports.Set("LinkIterator", OCLinkIterator::GetClass(env));
    exports.Set("LinkParamsIterator", OCLinkParamsIterator::GetClass(env));
    exports.Set("LinkParams", OCLinkParams::GetClass(env));
    exports.Set("Link", OCLink::GetClass(env));
    exports.Set("Memb", OCMemb::GetClass(env));
    exports.Set("MessageIterator", OCMessageIterator::GetClass(env));
    exports.Set("Message", OCMessage::GetClass(env));
    exports.Set("Mmem", OCMmem::GetClass(env));
    exports.Set("NetworkInterfaceCb", OCNetworkInterfaceCb::GetClass(env));
    exports.Set("PlatformInfo", OCPlatformInfo::GetClass(env));
    exports.Set("Process", OCProcess::GetClass(env));
    exports.Set("PropertiesCb", OCPropertiesCb::GetClass(env));
    exports.Set("RepresentationIterator", OCRepresentationIterator::GetClass(env));
    exports.Set("Representation", OCRepresentation::GetClass(env));
    exports.Set("Value", OCValue::GetClass(env));
    exports.Set("RequestHandler", OCRequestHandler::GetClass(env));
    exports.Set("Request", OCRequest::GetClass(env));
    exports.Set("Resource", OCResource::GetClass(env));
    exports.Set("ResponseBuffer", OCResponseBuffer::GetClass(env));
    exports.Set("Response", OCResponse::GetClass(env));
    exports.Set("RoleIterator", OCRoleIterator::GetClass(env));
    exports.Set("Role", OCRole::GetClass(env));
    exports.Set("ResourceTypeIterator", OCResourceTypeIterator::GetClass(env));
    exports.Set("ResourceType", OCResourceType::GetClass(env));
    exports.Set("SecurityAceIterator", OCSecurityAceIterator::GetClass(env));
    exports.Set("SecurityAce", OCSecurityAce::GetClass(env));
    exports.Set("SecurityAcl", OCSecurityAcl::GetClass(env));
    exports.Set("Cred", OCCred::GetClass(env));
    exports.Set("Creds", OCCreds::GetClass(env));
    exports.Set("SeparateResponse", OCSeparateResponse::GetClass(env));
    exports.Set("SessionEventCb", OCSessionEventCb::GetClass(env));
    exports.Set("SessionEventCbIterator", OCSessionEventCbIterator::GetClass(env));
    exports.Set("StringArrayIterator", OCStringArrayIterator::GetClass(env));
    exports.Set("StringArray", OCStringArray::GetClass(env));
    exports.Set("SoftwareUpdateHandler", OCSoftwareUpdateHandler::GetClass(env));
    exports.Set("Timer", OCTimer::GetClass(env));
    exports.Set("Uuid", OCUuid::GetClass(env));
    exports.Set("AceConnectionType", OCAceConnectionType::GetClass(env));
    exports.Set("AcePermissionsMask", OCAcePermissionsMask::GetClass(env));
    exports.Set("AceSubjectType", OCAceSubjectType::GetClass(env));
    exports.Set("AceWildcard", OCAceWildcard::GetClass(env));
    exports.Set("BlockwiseRole", OCBlockwiseRole::GetClass(env));
    exports.Set("CloudError", OCCloudError::GetClass(env));
    exports.Set("CloudStatusMask", OCCloudStatusMask::GetClass(env));
    exports.Set("ContentFormat", OCContentFormat::GetClass(env));
    exports.Set("CoreResource", OCCoreResource::GetClass(env));
    exports.Set("CloudPrivisoningStatus", OCCloudPrivisoningStatus::GetClass(env));
    exports.Set("DiscoveryFlags", OCDiscoveryFlags::GetClass(env));
    exports.Set("Enum", OCEnum::GetClass(env));
    exports.Set("EventCallbackResult", OCEventCallbackResult::GetClass(env));
    exports.Set("InterfaceEvent", OCInterfaceEvent::GetClass(env));
    exports.Set("InterfaceMask", OCInterfaceMask::GetClass(env));
    exports.Set("Method", OCMethod::GetClass(env));
    exports.Set("PositionDescription", OCPositionDescription::GetClass(env));
    exports.Set("Qos", OCQos::GetClass(env));
    exports.Set("RepValueType", OCRepValueType::GetClass(env));
    exports.Set("ResourcePropertiesMask", OCResourcePropertiesMask::GetClass(env));
    exports.Set("CredType", OCCredType::GetClass(env));
    exports.Set("CredUsage", OCCredUsage::GetClass(env));
    exports.Set("Encoding", OCEncoding::GetClass(env));
    exports.Set("SessionState", OCSessionState::GetClass(env));
    exports.Set("SpTypesMask", OCSpTypesMask::GetClass(env));
    exports.Set("Status", OCStatus::GetClass(env));
    exports.Set("SoftwareUpdateResult", OCSoftwareUpdateResult::GetClass(env));
    exports.Set("FVersion", OCFVersion::GetClass(env));
#if defined(OC_TCP)
    exports.Set("tcpCsmState", tcpCsmState::GetClass(env));
#endif
    exports.Set("TransportFlags", OCTransportFlags::GetClass(env));
    exports.Set("AceConnectionType", OCAceConnectionType::GetClass(env));
    exports.Set("AcePermissionsMask", OCAcePermissionsMask::GetClass(env));
    exports.Set("AceSubjectType", OCAceSubjectType::GetClass(env));
    exports.Set("AceWildcard", OCAceWildcard::GetClass(env));
    exports.Set("BlockwiseRole", OCBlockwiseRole::GetClass(env));
    exports.Set("CloudError", OCCloudError::GetClass(env));
    exports.Set("CloudStatusMask", OCCloudStatusMask::GetClass(env));
    exports.Set("ContentFormat", OCContentFormat::GetClass(env));
    exports.Set("CoreResource", OCCoreResource::GetClass(env));
    exports.Set("CloudPrivisoningStatus", OCCloudPrivisoningStatus::GetClass(env));
    exports.Set("DiscoveryFlags", OCDiscoveryFlags::GetClass(env));
    exports.Set("Enum", OCEnum::GetClass(env));
    exports.Set("EventCallbackResult", OCEventCallbackResult::GetClass(env));
    exports.Set("InterfaceEvent", OCInterfaceEvent::GetClass(env));
    exports.Set("InterfaceMask", OCInterfaceMask::GetClass(env));
    exports.Set("Method", OCMethod::GetClass(env));
    exports.Set("PositionDescription", OCPositionDescription::GetClass(env));
    exports.Set("Qos", OCQos::GetClass(env));
    exports.Set("RepValueType", OCRepValueType::GetClass(env));
    exports.Set("ResourcePropertiesMask", OCResourcePropertiesMask::GetClass(env));
    exports.Set("CredType", OCCredType::GetClass(env));
    exports.Set("CredUsage", OCCredUsage::GetClass(env));
    exports.Set("Encoding", OCEncoding::GetClass(env));
    exports.Set("SessionState", OCSessionState::GetClass(env));
    exports.Set("SpTypesMask", OCSpTypesMask::GetClass(env));
    exports.Set("Status", OCStatus::GetClass(env));
    exports.Set("SoftwareUpdateResult", OCSoftwareUpdateResult::GetClass(env));
    exports.Set("FVersion", OCFVersion::GetClass(env));
#if defined(OC_TCP)
    exports.Set("tcpCsmState", tcpCsmState::GetClass(env));
#endif
    exports.Set("TransportFlags", OCTransportFlags::GetClass(env));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ACE_NO_WC", &OCAceWildcard::get_OC_ACE_NO_WC));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ACE_WC_ALL", &OCAceWildcard::get_OC_ACE_WC_ALL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ACE_WC_ALL_PUBLIC", &OCAceWildcard::get_OC_ACE_WC_ALL_PUBLIC));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ACE_WC_ALL_SECURED", &OCAceWildcard::get_OC_ACE_WC_ALL_SECURED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_ATOM_XML", &OCContentFormat::get_APPLICATION_ATOM_XML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_CBOR", &OCContentFormat::get_APPLICATION_CBOR));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_EXI", &OCContentFormat::get_APPLICATION_EXI));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_FASTINFOSET", &OCContentFormat::get_APPLICATION_FASTINFOSET));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_JSON", &OCContentFormat::get_APPLICATION_JSON));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_LINK_FORMAT", &OCContentFormat::get_APPLICATION_LINK_FORMAT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_OCTET_STREAM", &OCContentFormat::get_APPLICATION_OCTET_STREAM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_RDF_XML", &OCContentFormat::get_APPLICATION_RDF_XML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_SOAP_FASTINFOSET", &OCContentFormat::get_APPLICATION_SOAP_FASTINFOSET));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_SOAP_XML", &OCContentFormat::get_APPLICATION_SOAP_XML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_VND_OCF_CBOR", &OCContentFormat::get_APPLICATION_VND_OCF_CBOR));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_XML", &OCContentFormat::get_APPLICATION_XML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_XMPP_XML", &OCContentFormat::get_APPLICATION_XMPP_XML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("APPLICATION_X_OBIX_BINARY", &OCContentFormat::get_APPLICATION_X_OBIX_BINARY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("AUDIO_RAW", &OCContentFormat::get_AUDIO_RAW));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("BLOCKWISE_CLIENT", &OCBlockwiseRole::get_OC_BLOCKWISE_CLIENT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("BLOCKWISE_SERVER", &OCBlockwiseRole::get_OC_BLOCKWISE_SERVER));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_DEREGISTERED", &OCCloudStatusMask::get_OC_CLOUD_DEREGISTERED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_ERROR_CONNECT", &OCCloudError::get_CLOUD_ERROR_CONNECT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_ERROR_REFRESH_ACCESS_TOKEN", &OCCloudError::get_CLOUD_ERROR_REFRESH_ACCESS_TOKEN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_ERROR_RESPONSE", &OCCloudError::get_CLOUD_ERROR_RESPONSE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_FAILURE", &OCCloudStatusMask::get_OC_CLOUD_FAILURE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_INITIALIZED", &OCCloudStatusMask::get_OC_CLOUD_INITIALIZED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_LOGGED_IN", &OCCloudStatusMask::get_OC_CLOUD_LOGGED_IN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_LOGGED_OUT", &OCCloudStatusMask::get_OC_CLOUD_LOGGED_OUT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_OK", &OCCloudError::get_CLOUD_OK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_REFRESHED_TOKEN", &OCCloudStatusMask::get_OC_CLOUD_REFRESHED_TOKEN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_REGISTERED", &OCCloudStatusMask::get_OC_CLOUD_REGISTERED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CLOUD_TOKEN_EXPIRY", &OCCloudStatusMask::get_OC_CLOUD_TOKEN_EXPIRY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CONN_ANON_CLEAR", &OCAceConnectionType::get_OC_CONN_ANON_CLEAR));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CONN_AUTH_CRYPT", &OCAceConnectionType::get_OC_CONN_AUTH_CRYPT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CONTINUE_DISCOVERY", &OCDiscoveryFlags::get_OC_CONTINUE_DISCOVERY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CPS_FAILED", &OCCloudPrivisoningStatus::get_OC_CPS_FAILED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CPS_READYTOREGISTER", &OCCloudPrivisoningStatus::get_OC_CPS_READYTOREGISTER));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CPS_REGISTERED", &OCCloudPrivisoningStatus::get_OC_CPS_REGISTERED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CPS_REGISTERING", &OCCloudPrivisoningStatus::get_OC_CPS_REGISTERING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CPS_UNINITIALIZED", &OCCloudPrivisoningStatus::get_OC_CPS_UNINITIALIZED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDTYPE_CERT", &OCCredType::get_OC_CREDTYPE_CERT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDTYPE_NULL", &OCCredType::get_OC_CREDTYPE_NULL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDTYPE_PSK", &OCCredType::get_OC_CREDTYPE_PSK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDUSAGE_IDENTITY_CERT", &OCCredUsage::get_OC_CREDUSAGE_IDENTITY_CERT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDUSAGE_MFG_CERT", &OCCredUsage::get_OC_CREDUSAGE_MFG_CERT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDUSAGE_MFG_TRUSTCA", &OCCredUsage::get_OC_CREDUSAGE_MFG_TRUSTCA));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDUSAGE_NULL", &OCCredUsage::get_OC_CREDUSAGE_NULL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDUSAGE_ROLE_CERT", &OCCredUsage::get_OC_CREDUSAGE_ROLE_CERT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CREDUSAGE_TRUSTCA", &OCCredUsage::get_OC_CREDUSAGE_TRUSTCA));
#if defined(OC_TCP)
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CSM_DONE", &tcpCsmState::get_CSM_DONE));
#endif
#if defined(OC_TCP)
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CSM_ERROR", &tcpCsmState::get_CSM_ERROR));
#endif
#if defined(OC_TCP)
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CSM_NONE", &tcpCsmState::get_CSM_NONE));
#endif
#if defined(OC_TCP)
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("CSM_SENT", &tcpCsmState::get_CSM_SENT));
#endif
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("DELETE", &OCMethod::get_OC_DELETE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("DISCOVERABLE", &OCResourcePropertiesMask::get_OC_DISCOVERABLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("DISCOVERY", &OCTransportFlags::get_DISCOVERY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENCODING_BASE64", &OCEncoding::get_OC_ENCODING_BASE64));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENCODING_HANDLE", &OCEncoding::get_OC_ENCODING_HANDLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENCODING_PEM", &OCEncoding::get_OC_ENCODING_PEM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENCODING_RAW", &OCEncoding::get_OC_ENCODING_RAW));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENCODING_UNSUPPORTED", &OCEncoding::get_OC_ENCODING_UNSUPPORTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ABORTED", &OCEnum::get_OC_ENUM_ABORTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ACTIVE", &OCEnum::get_OC_ENUM_ACTIVE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_AI", &OCEnum::get_OC_ENUM_AI));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_AIRDRY", &OCEnum::get_OC_ENUM_AIRDRY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ARMEDAWAY", &OCEnum::get_OC_ENUM_ARMEDAWAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ARMEDINSTANT", &OCEnum::get_OC_ENUM_ARMEDINSTANT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ARMEDMAXIMUM", &OCEnum::get_OC_ENUM_ARMEDMAXIMUM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ARMEDNIGHTSTAY", &OCEnum::get_OC_ENUM_ARMEDNIGHTSTAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ARMEDSTAY", &OCEnum::get_OC_ENUM_ARMEDSTAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_AROMA", &OCEnum::get_OC_ENUM_AROMA));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_AUTO", &OCEnum::get_OC_ENUM_AUTO));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_BOILING", &OCEnum::get_OC_ENUM_BOILING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_BREWING", &OCEnum::get_OC_ENUM_BREWING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_CANCELLED", &OCEnum::get_OC_ENUM_CANCELLED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_CIRCULATING", &OCEnum::get_OC_ENUM_CIRCULATING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_CLEANING", &OCEnum::get_OC_ENUM_CLEANING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_CLOTHES", &OCEnum::get_OC_ENUM_CLOTHES));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_COMPLETED", &OCEnum::get_OC_ENUM_COMPLETED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_COOL", &OCEnum::get_OC_ENUM_COOL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_DELICATE", &OCEnum::get_OC_ENUM_DELICATE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_DISABLED", &OCEnum::get_OC_ENUM_DISABLED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_DOWN", &OCEnum::get_OC_ENUM_DOWN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_DRY", &OCEnum::get_OC_ENUM_DRY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_DUAL", &OCEnum::get_OC_ENUM_DUAL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ENABLED", &OCEnum::get_OC_ENUM_ENABLED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_EXTENDED", &OCEnum::get_OC_ENUM_EXTENDED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_FAN", &OCEnum::get_OC_ENUM_FAN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_FAST", &OCEnum::get_OC_ENUM_FAST));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_FILTERMATERIAL", &OCEnum::get_OC_ENUM_FILTERMATERIAL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_FOCUSED", &OCEnum::get_OC_ENUM_FOCUSED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_GRINDING", &OCEnum::get_OC_ENUM_GRINDING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_HEATING", &OCEnum::get_OC_ENUM_HEATING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_HEAVY", &OCEnum::get_OC_ENUM_HEAVY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_IDLE", &OCEnum::get_OC_ENUM_IDLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_INK", &OCEnum::get_OC_ENUM_INK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_INKBLACK", &OCEnum::get_OC_ENUM_INKBLACK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_INKCYAN", &OCEnum::get_OC_ENUM_INKCYAN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_INKMAGENTA", &OCEnum::get_OC_ENUM_INKMAGENTA));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_INKTRICOLOUR", &OCEnum::get_OC_ENUM_INKTRICOLOUR));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_INKYELLOW", &OCEnum::get_OC_ENUM_INKYELLOW));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_KEEPWARM", &OCEnum::get_OC_ENUM_KEEPWARM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_NORMAL", &OCEnum::get_OC_ENUM_NORMAL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_NOTSUPPORTED", &OCEnum::get_OC_ENUM_NOTSUPPORTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PAUSE", &OCEnum::get_OC_ENUM_PAUSE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PENDING", &OCEnum::get_OC_ENUM_PENDING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PENDINGHELD", &OCEnum::get_OC_ENUM_PENDINGHELD));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PERMAPRESS", &OCEnum::get_OC_ENUM_PERMAPRESS));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PREWASH", &OCEnum::get_OC_ENUM_PREWASH));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PROCESSING", &OCEnum::get_OC_ENUM_PROCESSING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_PURE", &OCEnum::get_OC_ENUM_PURE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_QUICK", &OCEnum::get_OC_ENUM_QUICK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_QUIET", &OCEnum::get_OC_ENUM_QUIET));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_RINSE", &OCEnum::get_OC_ENUM_RINSE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_SECTORED", &OCEnum::get_OC_ENUM_SECTORED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_SILENT", &OCEnum::get_OC_ENUM_SILENT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_SLEEP", &OCEnum::get_OC_ENUM_SLEEP));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_SMART", &OCEnum::get_OC_ENUM_SMART));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_SPIN", &OCEnum::get_OC_ENUM_SPIN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_SPOT", &OCEnum::get_OC_ENUM_SPOT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_STEAM", &OCEnum::get_OC_ENUM_STEAM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_STOPPED", &OCEnum::get_OC_ENUM_STOPPED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_TESTING", &OCEnum::get_OC_ENUM_TESTING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_TONER", &OCEnum::get_OC_ENUM_TONER));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_TONERBLACK", &OCEnum::get_OC_ENUM_TONERBLACK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_TONERCYAN", &OCEnum::get_OC_ENUM_TONERCYAN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_TONERMAGENTA", &OCEnum::get_OC_ENUM_TONERMAGENTA));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_TONERYELLOW", &OCEnum::get_OC_ENUM_TONERYELLOW));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_WARM", &OCEnum::get_OC_ENUM_WARM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_WASH", &OCEnum::get_OC_ENUM_WASH));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_WET", &OCEnum::get_OC_ENUM_WET));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_WIND", &OCEnum::get_OC_ENUM_WIND));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_WRINKLEPREVENT", &OCEnum::get_OC_ENUM_WRINKLEPREVENT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("ENUM_ZIGZAG", &OCEnum::get_OC_ENUM_ZIGZAG));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("EVENT_CONTINUE", &OCEventCallbackResult::get_OC_EVENT_CONTINUE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("EVENT_DONE", &OCEventCallbackResult::get_OC_EVENT_DONE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("GATT", &OCTransportFlags::get_GATT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("GET", &OCMethod::get_OC_GET));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("HIGH_QOS", &OCQos::get_HIGH_QOS));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_A", &OCInterfaceMask::get_OC_IF_A));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_B", &OCInterfaceMask::get_OC_IF_B));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_BASELINE", &OCInterfaceMask::get_OC_IF_BASELINE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_CREATE", &OCInterfaceMask::get_OC_IF_CREATE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_LL", &OCInterfaceMask::get_OC_IF_LL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_R", &OCInterfaceMask::get_OC_IF_R));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_RW", &OCInterfaceMask::get_OC_IF_RW));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IF_S", &OCInterfaceMask::get_OC_IF_S));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IGNORE", &OCStatus::get_OC_IGNORE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IMAGE_GIF", &OCContentFormat::get_IMAGE_GIF));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IMAGE_JPEG", &OCContentFormat::get_IMAGE_JPEG));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IMAGE_PNG", &OCContentFormat::get_IMAGE_PNG));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IMAGE_TIFF", &OCContentFormat::get_IMAGE_TIFF));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IPV4", &OCTransportFlags::get_IPV4));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("IPV6", &OCTransportFlags::get_IPV6));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("LOW_QOS", &OCQos::get_LOW_QOS));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("MULTICAST", &OCTransportFlags::get_MULTICAST));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("NETWORK_INTERFACE_DOWN", &OCInterfaceEvent::get_NETWORK_INTERFACE_DOWN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("NETWORK_INTERFACE_UP", &OCInterfaceEvent::get_NETWORK_INTERFACE_UP));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OBSERVABLE", &OCResourcePropertiesMask::get_OC_OBSERVABLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_COAPCLOUDCONF", &OCCoreResource::get_OCF_COAPCLOUDCONF));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_CON", &OCCoreResource::get_OCF_CON));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_D", &OCCoreResource::get_OCF_D));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_INTROSPECTION_DATA", &OCCoreResource::get_OCF_INTROSPECTION_DATA));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_INTROSPECTION_WK", &OCCoreResource::get_OCF_INTROSPECTION_WK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_MNT", &OCCoreResource::get_OCF_MNT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_P", &OCCoreResource::get_OCF_P));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_RES", &OCCoreResource::get_OCF_RES));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_ACL", &OCCoreResource::get_OCF_SEC_ACL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_AEL", &OCCoreResource::get_OCF_SEC_AEL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_CRED", &OCCoreResource::get_OCF_SEC_CRED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_CSR", &OCCoreResource::get_OCF_SEC_CSR));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_DOXM", &OCCoreResource::get_OCF_SEC_DOXM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_PSTAT", &OCCoreResource::get_OCF_SEC_PSTAT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_ROLES", &OCCoreResource::get_OCF_SEC_ROLES));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_SDI", &OCCoreResource::get_OCF_SEC_SDI));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SEC_SP", &OCCoreResource::get_OCF_SEC_SP));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_SW_UPDATE", &OCCoreResource::get_OCF_SW_UPDATE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OCF_VER_1_0_0", &OCFVersion::get_OCF_VER_1_0_0));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("OIC_VER_1_1_0", &OCFVersion::get_OIC_VER_1_1_0));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERIODIC", &OCResourcePropertiesMask::get_OC_PERIODIC));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERM_CREATE", &OCAcePermissionsMask::get_OC_PERM_CREATE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERM_DELETE", &OCAcePermissionsMask::get_OC_PERM_DELETE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERM_NONE", &OCAcePermissionsMask::get_OC_PERM_NONE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERM_NOTIFY", &OCAcePermissionsMask::get_OC_PERM_NOTIFY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERM_RETRIEVE", &OCAcePermissionsMask::get_OC_PERM_RETRIEVE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PERM_UPDATE", &OCAcePermissionsMask::get_OC_PERM_UPDATE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PING_TIMEOUT", &OCStatus::get_OC_PING_TIMEOUT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POST", &OCMethod::get_OC_POST));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_BOTTOM", &OCPositionDescription::get_OC_POS_BOTTOM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_BOTTOMCENTRE", &OCPositionDescription::get_OC_POS_BOTTOMCENTRE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_BOTTOMLEFT", &OCPositionDescription::get_OC_POS_BOTTOMLEFT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_BOTTOMRIGHT", &OCPositionDescription::get_OC_POS_BOTTOMRIGHT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_CENTRE", &OCPositionDescription::get_OC_POS_CENTRE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_CENTRELEFT", &OCPositionDescription::get_OC_POS_CENTRELEFT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_CENTRERIGHT", &OCPositionDescription::get_OC_POS_CENTRERIGHT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_LEFT", &OCPositionDescription::get_OC_POS_LEFT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_RIGHT", &OCPositionDescription::get_OC_POS_RIGHT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_TOP", &OCPositionDescription::get_OC_POS_TOP));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_TOPCENTRE", &OCPositionDescription::get_OC_POS_TOPCENTRE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_TOPLEFT", &OCPositionDescription::get_OC_POS_TOPLEFT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_TOPRIGHT", &OCPositionDescription::get_OC_POS_TOPRIGHT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("POS_UNKNOWN", &OCPositionDescription::get_OC_POS_UNKNOWN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("PUT", &OCMethod::get_OC_PUT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_ARRAY", &OCRepValueType::get_OC_REP_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_BOOL", &OCRepValueType::get_OC_REP_BOOL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_BOOL_ARRAY", &OCRepValueType::get_OC_REP_BOOL_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_BYTE_STRING", &OCRepValueType::get_OC_REP_BYTE_STRING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_BYTE_STRING_ARRAY", &OCRepValueType::get_OC_REP_BYTE_STRING_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_DOUBLE", &OCRepValueType::get_OC_REP_DOUBLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_DOUBLE_ARRAY", &OCRepValueType::get_OC_REP_DOUBLE_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_INT", &OCRepValueType::get_OC_REP_INT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_INT_ARRAY", &OCRepValueType::get_OC_REP_INT_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_NIL", &OCRepValueType::get_OC_REP_NIL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_OBJECT", &OCRepValueType::get_OC_REP_OBJECT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_OBJECT_ARRAY", &OCRepValueType::get_OC_REP_OBJECT_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_STRING", &OCRepValueType::get_OC_REP_STRING));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("REP_STRING_ARRAY", &OCRepValueType::get_OC_REP_STRING_ARRAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SECURE", &OCResourcePropertiesMask::get_OC_SECURE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SECURED", &OCTransportFlags::get_SECURED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SESSION_CONNECTED", &OCSessionState::get_OC_SESSION_CONNECTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SESSION_DISCONNECTED", &OCSessionState::get_OC_SESSION_DISCONNECTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SP_BASELINE", &OCSpTypesMask::get_OC_SP_BASELINE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SP_BLACK", &OCSpTypesMask::get_OC_SP_BLACK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SP_BLUE", &OCSpTypesMask::get_OC_SP_BLUE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SP_PURPLE", &OCSpTypesMask::get_OC_SP_PURPLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_BAD_GATEWAY", &OCStatus::get_OC_STATUS_BAD_GATEWAY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_BAD_OPTION", &OCStatus::get_OC_STATUS_BAD_OPTION));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_BAD_REQUEST", &OCStatus::get_OC_STATUS_BAD_REQUEST));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_CHANGED", &OCStatus::get_OC_STATUS_CHANGED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_CREATED", &OCStatus::get_OC_STATUS_CREATED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_DELETED", &OCStatus::get_OC_STATUS_DELETED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_FORBIDDEN", &OCStatus::get_OC_STATUS_FORBIDDEN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_GATEWAY_TIMEOUT", &OCStatus::get_OC_STATUS_GATEWAY_TIMEOUT));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_INTERNAL_SERVER_ERROR", &OCStatus::get_OC_STATUS_INTERNAL_SERVER_ERROR));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_METHOD_NOT_ALLOWED", &OCStatus::get_OC_STATUS_METHOD_NOT_ALLOWED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_NOT_ACCEPTABLE", &OCStatus::get_OC_STATUS_NOT_ACCEPTABLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_NOT_FOUND", &OCStatus::get_OC_STATUS_NOT_FOUND));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_NOT_IMPLEMENTED", &OCStatus::get_OC_STATUS_NOT_IMPLEMENTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_NOT_MODIFIED", &OCStatus::get_OC_STATUS_NOT_MODIFIED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_OK", &OCStatus::get_OC_STATUS_OK));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_PROXYING_NOT_SUPPORTED", &OCStatus::get_OC_STATUS_PROXYING_NOT_SUPPORTED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_REQUEST_ENTITY_TOO_LARGE", &OCStatus::get_OC_STATUS_REQUEST_ENTITY_TOO_LARGE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_SERVICE_UNAVAILABLE", &OCStatus::get_OC_STATUS_SERVICE_UNAVAILABLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_UNAUTHORIZED", &OCStatus::get_OC_STATUS_UNAUTHORIZED));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STATUS_UNSUPPORTED_MEDIA_TYPE", &OCStatus::get_OC_STATUS_UNSUPPORTED_MEDIA_TYPE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("STOP_DISCOVERY", &OCDiscoveryFlags::get_OC_STOP_DISCOVERY));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SUBJECT_CONN", &OCAceSubjectType::get_OC_SUBJECT_CONN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SUBJECT_ROLE", &OCAceSubjectType::get_OC_SUBJECT_ROLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SUBJECT_UUID", &OCAceSubjectType::get_OC_SUBJECT_UUID));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_CONN_FAIL", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_CONN_FAIL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_IDLE", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_IDLE));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_INVALID_URL", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_INVALID_URL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_LESS_FLASH", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_LESS_FLASH));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_LESS_RAM", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_LESS_RAM));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_SUCCESS", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_SUCCESS));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_SVV_FAIL", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_SVV_FAIL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("SWUPDATE_RESULT_UPGRADE_FAIL", &OCSoftwareUpdateResult::get_OC_SWUPDATE_RESULT_UPGRADE_FAIL));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("TCP", &OCTransportFlags::get_TCP));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("TEXT_CSV", &OCContentFormat::get_TEXT_CSV));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("TEXT_HTML", &OCContentFormat::get_TEXT_HTML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("TEXT_PLAIN", &OCContentFormat::get_TEXT_PLAIN));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("TEXT_XML", &OCContentFormat::get_TEXT_XML));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("VIDEO_RAW", &OCContentFormat::get_VIDEO_RAW));
    exports.DefineProperty(Napi::PropertyDescriptor::Accessor("__NUM_OC_STATUS_CODES__", &OCStatus::get___NUM_OC_STATUS_CODES__));
    exports.Set("handle_coap_signal_message", Napi::Function::New(env, N_handle_coap_signal_message));
#if defined(OC_COLLECTIONS_IF_CREATE)
    exports.Set("oc_collections_add_rt_factory", Napi::Function::New(env, N_oc_collections_add_rt_factory));
#endif
    exports.Set("oc_set_immutable_device_identifier", Napi::Function::New(env, N_oc_set_immutable_device_identifier));
    exports.Set("oc_get_diagnostic_message", Napi::Function::New(env, N_oc_get_diagnostic_message));
    exports.Set("oc_get_query_value", Napi::Function::New(env, N_oc_get_query_value));
    exports.Set("oc_get_request_payload_raw", Napi::Function::New(env, N_oc_get_request_payload_raw));
    exports.Set("oc_get_response_payload_raw", Napi::Function::New(env, N_oc_get_response_payload_raw));
    exports.Set("oc_init_query_iterator", Napi::Function::New(env, N_oc_init_query_iterator));
    exports.Set("oc_iterate_query", Napi::Function::New(env, N_oc_iterate_query));
    exports.Set("oc_iterate_query_get_values", Napi::Function::New(env, N_oc_iterate_query_get_values));
    exports.Set("oc_abort", Napi::Function::New(env, N_oc_abort));
    exports.Set("oc_exit", Napi::Function::New(env, N_oc_exit));
    exports.Set("oc_base64_decode", Napi::Function::New(env, N_oc_base64_decode));
    exports.Set("oc_base64_encode", Napi::Function::New(env, N_oc_base64_encode));
    exports.Set("oc_allocate_message", Napi::Function::New(env, N_oc_allocate_message));
    exports.Set("oc_allocate_message_from_pool", Napi::Function::New(env, N_oc_allocate_message_from_pool));
#if defined(OC_SECURITY)
    exports.Set("oc_close_all_tls_sessions", Napi::Function::New(env, N_oc_close_all_tls_sessions));
#endif
#if defined(OC_SECURITY)
    exports.Set("oc_close_all_tls_sessions_for_device", Napi::Function::New(env, N_oc_close_all_tls_sessions_for_device));
#endif
    exports.Set("oc_internal_allocate_outgoing_message", Napi::Function::New(env, N_oc_internal_allocate_outgoing_message));
    exports.Set("oc_message_add_ref", Napi::Function::New(env, N_oc_message_add_ref));
    exports.Set("oc_message_unref", Napi::Function::New(env, N_oc_message_unref));
    exports.Set("oc_recv_message", Napi::Function::New(env, N_oc_recv_message));
    exports.Set("oc_send_message", Napi::Function::New(env, N_oc_send_message));
    exports.Set("oc_set_buffers_avail_cb", Napi::Function::New(env, N_oc_set_buffers_avail_cb));
    exports.Set("oc_clock_encode_time_rfc3339", Napi::Function::New(env, N_oc_clock_encode_time_rfc3339));
    exports.Set("oc_clock_parse_time_rfc3339", Napi::Function::New(env, N_oc_clock_parse_time_rfc3339));
    exports.Set("oc_clock_time_rfc3339", Napi::Function::New(env, N_oc_clock_time_rfc3339));
    exports.Set("oc_check_if_collection", Napi::Function::New(env, N_oc_check_if_collection));
    exports.Set("oc_collection_add", Napi::Function::New(env, N_oc_collection_add));
    exports.Set("oc_collection_alloc", Napi::Function::New(env, N_oc_collection_alloc));
    exports.Set("oc_collection_free", Napi::Function::New(env, N_oc_collection_free));
    exports.Set("oc_collection_get_all", Napi::Function::New(env, N_oc_collection_get_all));
#if defined(OC_COLLECTIONS_IF_CREATE)
    exports.Set("oc_collections_free_rt_factories", Napi::Function::New(env, N_oc_collections_free_rt_factories));
#endif
    exports.Set("oc_get_collection_by_uri", Napi::Function::New(env, N_oc_get_collection_by_uri));
    exports.Set("oc_get_link_by_uri", Napi::Function::New(env, N_oc_get_link_by_uri));
    exports.Set("oc_get_next_collection_with_link", Napi::Function::New(env, N_oc_get_next_collection_with_link));
    exports.Set("oc_handle_collection_request", Napi::Function::New(env, N_oc_handle_collection_request));
    exports.Set("oc_link_set_interfaces", Napi::Function::New(env, N_oc_link_set_interfaces));
    exports.Set("handle_network_interface_event_callback", Napi::Function::New(env, N_handle_network_interface_event_callback));
    exports.Set("handle_session_event_callback", Napi::Function::New(env, N_handle_session_event_callback));
#if defined(OC_TCP)
    exports.Set("oc_connectivity_end_session", Napi::Function::New(env, N_oc_connectivity_end_session));
#endif
    exports.Set("oc_connectivity_get_endpoints", Napi::Function::New(env, N_oc_connectivity_get_endpoints));
    exports.Set("oc_connectivity_init", Napi::Function::New(env, N_oc_connectivity_init));
    exports.Set("oc_connectivity_shutdown", Napi::Function::New(env, N_oc_connectivity_shutdown));
    exports.Set("oc_dns_lookup", Napi::Function::New(env, N_oc_dns_lookup));
    exports.Set("oc_send_buffer", Napi::Function::New(env, N_oc_send_buffer));
    exports.Set("oc_send_discovery_request", Napi::Function::New(env, N_oc_send_discovery_request));
    exports.Set("oc_core_encode_interfaces_mask", Napi::Function::New(env, N_oc_core_encode_interfaces_mask));
    exports.Set("oc_core_get_resource_by_index", Napi::Function::New(env, N_oc_core_get_resource_by_index));
    exports.Set("oc_core_populate_resource", Napi::Function::New(env, N_oc_core_populate_resource));
    exports.Set("oc_store_uri", Napi::Function::New(env, N_oc_store_uri));
    exports.Set("oc_create_discovery_resource", Napi::Function::New(env, N_oc_create_discovery_resource));
    exports.Set("oc_concat_strings", Napi::Function::New(env, N_oc_concat_strings));
    exports.Set("oc_join_string_array", Napi::Function::New(env, N_oc_join_string_array));
    exports.Set("oc_memb_init", Napi::Function::New(env, N_oc_memb_init));
    exports.Set("oc_memb_inmemb", Napi::Function::New(env, N_oc_memb_inmemb));
    exports.Set("oc_memb_numfree", Napi::Function::New(env, N_oc_memb_numfree));
    exports.Set("oc_memb_set_buffers_avail_cb", Napi::Function::New(env, N_oc_memb_set_buffers_avail_cb));
#if defined(OC_MEMORY_TRACE)
    exports.Set("oc_mem_trace_add_pace", Napi::Function::New(env, N_oc_mem_trace_add_pace));
#endif
#if defined(OC_MEMORY_TRACE)
    exports.Set("oc_mem_trace_init", Napi::Function::New(env, N_oc_mem_trace_init));
#endif
#if defined(OC_MEMORY_TRACE)
    exports.Set("oc_mem_trace_shutdown", Napi::Function::New(env, N_oc_mem_trace_shutdown));
#endif
    exports.Set("oc_mmem_init", Napi::Function::New(env, N_oc_mmem_init));
    exports.Set("oc_network_event", Napi::Function::New(env, N_oc_network_event));
    exports.Set("oc_network_interface_event", Napi::Function::New(env, N_oc_network_interface_event));
    exports.Set("oc_network_event_handler_mutex_destroy", Napi::Function::New(env, N_oc_network_event_handler_mutex_destroy));
    exports.Set("oc_network_event_handler_mutex_init", Napi::Function::New(env, N_oc_network_event_handler_mutex_init));
    exports.Set("oc_network_event_handler_mutex_lock", Napi::Function::New(env, N_oc_network_event_handler_mutex_lock));
    exports.Set("oc_network_event_handler_mutex_unlock", Napi::Function::New(env, N_oc_network_event_handler_mutex_unlock));
    exports.Set("oc_status_code", Napi::Function::New(env, N_oc_status_code));
    return exports;
}
